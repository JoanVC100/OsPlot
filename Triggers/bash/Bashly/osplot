#!/usr/bin/env bash
# This script was generated by bashly 1.0.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# The MIT License (MIT)

# Copyright (c) Danny Ben Shitrit

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
osplot_usage() {
  if [[ -n $long_usage ]]; then
    printf "osplot - CLI per interactuar amb múltiples opcions de l'oscil·loscopi OsPlot\n"
    echo

  else
    printf "osplot - CLI per interactuar amb múltiples opcions de l'oscil·loscopi OsPlot\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  osplot COMMAND\n"
  printf "  osplot [COMMAND] --help | -h\n"
  printf "  osplot --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Canvia el nombre de mostres que s'ensenyen a cada trigger.\n" "mostres_finestra"
  printf "  %s   Canvia el nivell del trigger.\n" "nivell_trigger  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
osplot_mostres_finestra_usage() {
  if [[ -n $long_usage ]]; then
    printf "osplot mostres_finestra - Canvia el nombre de mostres que s'ensenyen a cada trigger.\n"
    echo

  else
    printf "osplot mostres_finestra - Canvia el nombre de mostres que s'ensenyen a cada trigger.\n"
    echo

  fi

  printf "Alias: n\n"
  echo

  printf "%s\n" "Usage:"
  printf "  osplot mostres_finestra N_MOSTRES\n"
  printf "  osplot mostres_finestra --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "N_MOSTRES"
    printf "    El nombre de mostres. Nomes s'accepten enters entre 50 i 1000.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  osplot mostres_finestra 500\n"
    printf "  osplot n 500\n"
    echo

  fi
}

# :command.usage
osplot_nivell_trigger_usage() {
  if [[ -n $long_usage ]]; then
    printf "osplot nivell_trigger - Canvia el nivell del trigger.\n"
    echo

  else
    printf "osplot nivell_trigger - Canvia el nivell del trigger.\n"
    echo

  fi

  printf "Alias: t\n"
  echo

  printf "%s\n" "Usage:"
  printf "  osplot nivell_trigger NIVELL [OPTIONS]\n"
  printf "  osplot nivell_trigger --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--sense-escalar, -s"
    printf "    Interpreta n_mostres com un nombre entre 0 i 255.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NIVELL"
    printf "    El nivell del trigger. Nomes s'accepten valors entre 0 i 5.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  osplot mostres_finestra 2.5\n"
    printf "  osplot n -s 128\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
osplot_mostres_finestra_command() {
  # src/mostres_finestra_command.sh
  n_mostres=$(echo "${args[n_mostres]}" | bc 2> /dev/null)
  directori_script="/tmp/OsPlot"

  if [ -d $directori_script  ]; then
      if [[ $n_mostres == "${args[n_mostres]}" ]] && [[ $n_mostres != "$(echo -e "(standard_in) 1: syntax error\n")" ]]; then
          if [[ $n_mostres -lt 50 ]] || [[ $n_mostres -gt 1000 ]]; then
              echo "Número de mostres invàl·lid. El número ha d'estar entre 50 i 1000".
          else
              echo $n_mostres > $directori_script/mostres_finestra
          fi
      else
          echo "El número de mostres no és un número, o està mal escrit"
      fi
  else
      echo "No s'ha iniciat OsPlot"
  fi
}

# :command.function
osplot_nivell_trigger_command() {
  # src/nivell_trigger_command.sh
  nivell_trigger=$(echo "${args[nivell]}" | bc 2> /dev/null)
  directori_script="/tmp/OsPlot"

  if [ -d $directori_script  ]; then
      if [[ $nivell_trigger == "${args[nivell]}" ]] && [[ $nivell_trigger != "$(echo -e "(standard_in) 1: syntax error\n")" ]]; then
          if [[ ! ${args[--sense-escalar]} ]]; then
              printf -v nivell_trigger %.0f $(echo "$nivell_trigger*255/5" | bc)
              if [[ $nivell_trigger -lt 0 ]] || [[ $nivell_trigger -gt 255 ]]; then
                  echo "Rang de trigger incorrecte. El nivell ha d'estar entre 0 i 5"
                  exit
              fi
          else
              LC_NUMERIC="en_US.UTF-8" printf -v nivell_trigger %.0f $nivell_trigger
              if [[ $nivell_trigger -lt 0 ]] || [[ $nivell_trigger -gt 255 ]]; then
                  echo "Rang de trigger incorrecte. El nivell ha d'estar entre 0 i 255"
                  exit
              fi
          fi
          echo $nivell_trigger > "$directori_script/nivell_trigger"
      else
          echo "El nivell del trigger no és un número, o està mal escrit"
      fi
  else
      echo "No s'ha iniciat OsPlot"
  fi
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        osplot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    mostres_finestra | n)
      action="mostres_finestra"
      shift
      osplot_mostres_finestra_parse_requirements "$@"
      shift $#
      ;;

    nivell_trigger | t)
      action="nivell_trigger"
      shift
      osplot_nivell_trigger_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      osplot_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
osplot_mostres_finestra_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        osplot_mostres_finestra_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="mostres_finestra"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['n_mostres']+x} ]]; then

          args['n_mostres']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['n_mostres']+x} ]]; then
    printf "missing required argument: N_MOSTRES\nusage: osplot mostres_finestra N_MOSTRES\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
osplot_nivell_trigger_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        osplot_nivell_trigger_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="nivell_trigger"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --sense-escalar | -s)

        # :flag.case_no_arg
        args['--sense-escalar']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['nivell']+x} ]]; then

          args['nivell']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['nivell']+x} ]]; then
    printf "missing required argument: NIVELL\nusage: osplot nivell_trigger NIVELL [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "mostres_finestra")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        osplot_mostres_finestra_usage
      else
        osplot_mostres_finestra_command
      fi
      ;;

    "nivell_trigger")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        osplot_nivell_trigger_usage
      else
        osplot_nivell_trigger_command
      fi
      ;;

  esac
}

initialize
run "$@"
